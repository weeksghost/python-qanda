BUILT-INS:

all() —- Return True if all elements of the iterable are true (or if the iterable is empty). Equivalent to:

    def all(iterable):
        for element in iterable:
            if not element:
                return False
        return True

repr() —- Return a string containing a printable representation of an object.

====================================================================================

REGULAR EXPRESSION:

. (dot) any char
\w word char
\d digit
\s whitespace  \S non-whitespace
+ 1 or more
* 0 or more
[] set of chars a-z, 0-9
() parenthesis markup to match particular items

Find email:

search(pattern, string, flags=0)
    Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found.

    re.search(pat, str)


match(pattern, string, flags=0)
    Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found.

    match = re.search(pat, str)

    Extract item(s):

    match.group(1) —> nick.p
    match.group(2) —> gmail.com


findall(pattern, string, flags=0)
    Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result.

    re.findall(r'[\w.]+@[\w.]+', 'blah nick.p@gmail.com shmacky fuck@stick ')

    ['nick.p@gmail.com', 'fuck@stick']


====================================================================================

STRINGS:

s.lower(), s.upper() -- returns the lowercase or uppercase version of the string

s.strip() -- returns a string with whitespace removed from the start and end

s.isalpha()/s.isdigit()/s.isspace()... -- tests if all the string chars are in the various 
character classes

s.startswith('other'), s.endswith('other') -- tests if the string starts or ends with the given other string

s.find('other') -- searches for the given other string (not a regular expression) within s, and returns the first index where it begins or -1 if not found

s.replace('old', 'new') -- returns a string where all occurrences of 'old' have been replaced by 'new'

s.split('delim') -- returns a list of substrings separated by the given delimiter. The delimiter is not a regular expression, it's just text. 'aaa,bbb,ccc'.split(',') -> ['aaa', 'bbb', 'ccc']. As a convenient special case s.split() (with no arguments) splits on all whitespace chars.

s.join(list) -- opposite of split(), joins the elements in the given list together using the string as the delimiter. e.g. '---'.join(['aaa', 'bbb', 'ccc']) -> aaa---bbb---ccc

====================================================================================

DATA TYPES:


tuple() —- A tuple consists of a number of values separated by commas

set() —- Build an unordered collection of unique elements.

  ex: nums = set([1,1,2,3,3,3,4]) == {1, 2, 3, 4}

map() —- Apply function to every item of iterable and return a list of the results.

====================================================================================

GLOSSARY:

Dict key/value hash table: - The dictionary takes in scattered data and make it into something coherent.

The contents of a dict can be written as a series of key:value pairs within braces { }, e.g. dict = {key1:value1, key2:value2, ... }. The "empty dict" is just an empty pair of curly braces {}.

Looking up or setting a value in a dict uses square brackets, e.g. dict['foo'] looks up the value under the key 'foo'.

Looking up a value which is not in the dict throws a KeyError -- use "in" to check if the key is in the dict, or use dict.get(key) which returns the value or None if the key is not present (or get(key, not-found) allows you to specify what value to return in the not-found case).

The methods dict.keys() and dict.values() return lists of the keys or values explicitly.

dict.items() returns a list of (key, value) tuples, which is the most efficient way to examine all the key value data in the dictionary. All of these lists can be passed to the sorted() function.

  ## Loop over the keys in sorted order,
  ## accessing each key/value
  for key in sorted(dict.keys()):
    print key, dict[key]

  ## This loop syntax accesses the whole dict by looping
  ## over the .items() tuple list, accessing one (key, value)
  ## pair on each iteration.
  for k, v in dict.items(): print k, '>', v
  ## a > alpha    o > omega     g > gamma

The % operator works conveniently to substitute values from a dict into a string by name:

  hash = {}
  hash['word'] = 'garfield'
  hash['count'] = 42
  s = 'I want %(count)d copies of %(word)s' % hash  # %d for int, %s for string
  # 'I want 42 copies of garfield'

List Comprehensions:

The syntax is [ expr for var in list ] -- the for var in list looks like a regular for-loop, but without the colon (:). The expr to its left is evaluated once for each element to give the values for the new list.

  nums = [1, 2, 3, 4]

  for n in nums:
    return n * n

	OR

  squares = [ n * n for n in nums ]

  ————————————————————————————————-

  ## Select values <= 2
  nums = [2, 8, 1, 6]

  for n in nums:
    if n <=2:
        return n

	OR

  small = [ n for n in nums if n <= 2 ]  ## [2, 1]

  ————————————————————————————————-

  ## Select fruits containing 'a', change to upper case
  fruits = ['apple', 'cherry', 'bannana', 'lemon']

  for s in fruits:
    if ‘a’ in s:
	return s.upper()

	OR

  afruits = [ s.upper() for s in fruits if 'a' in s ]
  ## ['APPLE', 'BANNANA']


  ————————————————————————————————-

 Increment Operator: +=

Add AND assignment operator, It adds right operand to the left operand and assigns the result to left operand.

	c += a is equivalent to c = c + a


Slicing:

Refer to sub-parts of sequences

 +---+---+---+---+---+---+
 | p | y | t | h | o | n |
 +---+---+---+---+---+---+
   0   1   2   3   4   5
  -6  -5  -4  -3  -2  -1

s[1:4] is ‘yth’  —- chars starting at index 1 and extending up to but not including index 4
s[1:] is ‘ytho’ —- omitting either index defaults to the start or end of the string
s[:] is ‘python’ —- omitting both always gives us a copy of the whole thing (this is the pythonic way to copy a sequence like a string or list)
s[1:100] is ‘ytho’ —- an index that is too big is truncated down to the string length

The standard zero-based index numbers give easy access to chars near the start of the string. As an alternative, Python uses negative numbers to give easy access to the chars at the end of the string: s[-1] is the last char 'o', s[-2] is 'l' the next-to-last char, and so on. Negative index numbers count back from the end of the string:

s[-1] is ’n’ -- last char (1st from the end)
s[-4] is ’t’ —- 4th from the end
s[:-3] is ‘pyt’  -- going up to but not including the last 3 chars
s[-3:] is ‘hon’ -- starting with the 3rd char from the end and extending to the end of the string


hashable —- An object is hashable if it has a hash value which never changes during its lifetime


LAMBDA:

Lambda expressions (sometimes called lambda forms) have the same syntactic position as expressions.

They are a shorthand to create anonymous functions; the expression yields a function object:

	lambda argument_list: expression

The unnamed object behaves like a function object defined with:

	def name(arguments):
	    return expression

FILES:

The open() function opens and returns a file handle that can be used to read or write a file in the usual way. The code f = open('name', 'r') opens the file into the variable f, ready for reading operations, and use f.close() when finished. Instead of 'r', use 'w' for writing, and 'a' for append. The special mode 'rU' is the "Universal" option for text files where it's smart about converting different line-endings so they always come through as a simple '\n'. The standard for-loop works for text files, iterating through the lines of the file (this works only for text files, not binary files). The for-loop technique is a simple and efficient way to look at all the lines in a text file:

  # Echo the contents of a file
  f = open('foo.txt', 'rU')
  for line in f:   ## iterates over the lines of the file
    print line,    ## trailing , so print does not add an end-of-line char
                   ## since 'line' already includes the end-of line.
  f.close()

The f.readlines() method reads the whole file into memory and returns its contents as a list of its lines. The f.read() method reads the whole file into a single string, which can be a handy way to deal with the text all at once, such as with regular expressions we'll see later.


Files Unicode

import codecs

f = codecs.open('foo.txt', 'rU', 'utf-8')
for line in f:
  # here line is a *unicode* string
  
  
RANDOM:

AND is higher precedence than OR in python and is evaluated first:

x = True
y = False
z = False

if x or y and z:
    print "yes"
else:
    print "no"
    
#Result == yes AND is higher precedence than OR in python and is evaluated first

NOT has first precedence, then AND, then OR

x = True
y = False
z = False

if not x or y:
    print 1
elif not x or not y and z:
    print 2
elif not x or y or not y and x:
    print 3
else:
    print 4
    
# Result == 3 NOT has first precedence, then AND, then OR


print r"\nwoow"

Strings prefixed with the letter 'r' or 'R' a string literal becomes a raw string and the escape sequences such as \n are not converted.

print "\x48\x49!" --> Hi!

\x is an escape sequence that means the following 2 digits are a hexadicmal number encoding a character.


Print all the ites in the list on a seperate line

names = ['Ramesh', 'Rajesh', 'Roger', 'Ivan', 'Nico'

There is a join method to string objects which takes an iterable object as parameter and combines the string calling the method in between each item to produce a resulting string:

print "\n".join(names)
